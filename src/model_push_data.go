/*
Static OpenAPI document of Push API resource

Push API resources Open API documentation asdas

API version: 0.4.4-alpha.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package databox

import (
	"encoding/json"
)

// checks if the PushData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PushData{}

// PushData struct for PushData
type PushData struct {
	Attributes []PushDataAttribute `json:"attributes,omitempty"`
	Date *string `json:"date,omitempty"`
	Key *string `json:"key,omitempty"`
	PeriodFrom *string `json:"periodFrom,omitempty"`
	PeriodTo *string `json:"periodTo,omitempty"`
	Unit *string `json:"unit,omitempty"`
	Value *float32 `json:"value,omitempty"`
}

// NewPushData instantiates a new PushData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPushData() *PushData {
	this := PushData{}
	return &this
}

// NewPushDataWithDefaults instantiates a new PushData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPushDataWithDefaults() *PushData {
	this := PushData{}
	return &this
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *PushData) GetAttributes() []PushDataAttribute {
	if o == nil || IsNil(o.Attributes) {
		var ret []PushDataAttribute
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PushData) GetAttributesOk() ([]PushDataAttribute, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *PushData) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given []PushDataAttribute and assigns it to the Attributes field.
func (o *PushData) SetAttributes(v []PushDataAttribute) {
	o.Attributes = v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *PushData) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PushData) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *PushData) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *PushData) SetDate(v string) {
	o.Date = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *PushData) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PushData) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *PushData) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *PushData) SetKey(v string) {
	o.Key = &v
}

// GetPeriodFrom returns the PeriodFrom field value if set, zero value otherwise.
func (o *PushData) GetPeriodFrom() string {
	if o == nil || IsNil(o.PeriodFrom) {
		var ret string
		return ret
	}
	return *o.PeriodFrom
}

// GetPeriodFromOk returns a tuple with the PeriodFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PushData) GetPeriodFromOk() (*string, bool) {
	if o == nil || IsNil(o.PeriodFrom) {
		return nil, false
	}
	return o.PeriodFrom, true
}

// HasPeriodFrom returns a boolean if a field has been set.
func (o *PushData) HasPeriodFrom() bool {
	if o != nil && !IsNil(o.PeriodFrom) {
		return true
	}

	return false
}

// SetPeriodFrom gets a reference to the given string and assigns it to the PeriodFrom field.
func (o *PushData) SetPeriodFrom(v string) {
	o.PeriodFrom = &v
}

// GetPeriodTo returns the PeriodTo field value if set, zero value otherwise.
func (o *PushData) GetPeriodTo() string {
	if o == nil || IsNil(o.PeriodTo) {
		var ret string
		return ret
	}
	return *o.PeriodTo
}

// GetPeriodToOk returns a tuple with the PeriodTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PushData) GetPeriodToOk() (*string, bool) {
	if o == nil || IsNil(o.PeriodTo) {
		return nil, false
	}
	return o.PeriodTo, true
}

// HasPeriodTo returns a boolean if a field has been set.
func (o *PushData) HasPeriodTo() bool {
	if o != nil && !IsNil(o.PeriodTo) {
		return true
	}

	return false
}

// SetPeriodTo gets a reference to the given string and assigns it to the PeriodTo field.
func (o *PushData) SetPeriodTo(v string) {
	o.PeriodTo = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *PushData) GetUnit() string {
	if o == nil || IsNil(o.Unit) {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PushData) GetUnitOk() (*string, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *PushData) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *PushData) SetUnit(v string) {
	o.Unit = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *PushData) GetValue() float32 {
	if o == nil || IsNil(o.Value) {
		var ret float32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PushData) GetValueOk() (*float32, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *PushData) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given float32 and assigns it to the Value field.
func (o *PushData) SetValue(v float32) {
	o.Value = &v
}

func (o PushData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PushData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.PeriodFrom) {
		toSerialize["periodFrom"] = o.PeriodFrom
	}
	if !IsNil(o.PeriodTo) {
		toSerialize["periodTo"] = o.PeriodTo
	}
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullablePushData struct {
	value *PushData
	isSet bool
}

func (v NullablePushData) Get() *PushData {
	return v.value
}

func (v *NullablePushData) Set(val *PushData) {
	v.value = val
	v.isSet = true
}

func (v NullablePushData) IsSet() bool {
	return v.isSet
}

func (v *NullablePushData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePushData(val *PushData) *NullablePushData {
	return &NullablePushData{value: val, isSet: true}
}

func (v NullablePushData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePushData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


